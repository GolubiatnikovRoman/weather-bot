import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import requests

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

USER_PREFERENCES = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É.')

async def set_units(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args and context.args[0].lower() in ['c', 'f']:
        USER_PREFERENCES[user_id] = context.args[0].lower()
        unit_text = '–¶–µ–ª—å—Å–∏—è' if context.args[0].lower() == 'c' else '–§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞'
        await update.message.reply_text(f'–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {unit_text}')
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /units c –∏–ª–∏ /units f –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è.')

async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    user_id = update.message.from_user.id
    units = USER_PREFERENCES.get(user_id, 'c')
    api_units = 'metric' if units == 'c' else 'imperial'
    api_key = os.getenv('OWM_API_KEY')
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units={api_units}&lang=ru'
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            temp = int(data['main']['temp'])
            wind = data['wind']['speed']
            desc = data['weather'][0]['description'].capitalize()
            temp_symbol = '¬∞C' if units == 'c' else '¬∞F'
            
            mood = '‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ!' if temp < 0 else 'üåû –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!' if temp > 20 else '‚õÖÔ∏è –°–≤–µ–∂–æ, –Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ!'
            weather = f"üåÜ –ì–æ—Ä–æ–¥: {data['name']}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}{temp_symbol}\nüí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n{mood}"
            
            keyboard = [[
                InlineKeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è', callback_data=f'forecast_{city}'),
                InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã', callback_data='change_units')
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(weather, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = None
    
    if isinstance(update, Update) and update.message:
        city = ' '.join(context.args) if context.args else None
    elif update.callback_query:
        city = update.callback_query.data.split('_')[1]
    
    if not city:
        await update.callback_query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /forecast <–≥–æ—Ä–æ–¥>")
        return
    
    user_id = update.effective_user.id
    units = USER_PREFERENCES.get(user_id, 'c')
    api_units = 'metric' if units == 'c' else 'imperial'
    api_key = os.getenv('OWM_API_KEY')
    url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units={api_units}&lang=ru'
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            forecast_text = f'üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 3 –¥–Ω—è:\n'
            temp_symbol = '¬∞C' if units == 'c' else '¬∞F'
            
            for i in range(0, 24, 8):  # 3 –¥–Ω—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤)
                day_data = data['list'][i]
                date = day_data['dt_txt'].split(' ')[0]
                temp = int(day_data['main']['temp'])
                desc = day_data['weather'][0]['description'].capitalize()
                forecast_text += f'üìÖ {date}: {temp}{temp_symbol}, {desc}\n'
            
            await update.callback_query.message.reply_text(forecast_text)
        else:
            await update.callback_query.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('forecast_'):
        city = query.data.split('_')[1]
        await get_forecast(query, context)
    elif query.data == 'change_units':
        await query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /units c –∏–ª–∏ /units f –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è.")

def main():
    app = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("units", set_units))
    app.add_handler(CommandHandler("forecast", get_forecast))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_weather))
    app.add_handler(CallbackQueryHandler(button_callback))
    
    app.run_polling()

if __name__ == '__main__':
    main()
