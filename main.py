import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É.')

async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    api_key = os.getenv('OWM_API_KEY')
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru'
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            weather = (
                f"üåÜ –ì–æ—Ä–æ–¥: {data['name']}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(data['main']['temp'])}¬∞C\n"  # –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
                f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
                f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description'].capitalize()}"
            )
            await update.message.reply_text(weather)
        else:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_weather))
    app.run_polling()

if __name__ == '__main__':
    main()