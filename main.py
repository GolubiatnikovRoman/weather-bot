import os
import logging
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

USER_PREFERENCES = {}

# ================== –ö–û–ú–ê–ù–î–´ ================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    keyboard = [
        ["üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üå§ *–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞* - –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É\n"
        "üìÖ *–ü—Ä–æ–≥–Ω–æ–∑* - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è\n"
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –ò–∑–º–µ–Ω–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (¬∞C/¬∞F)\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/units - –ò–∑–º–µ–Ω–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        "/forecast [–≥–æ—Ä–æ–¥] - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É!"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ================== #
async def set_units(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    keyboard = [[
        InlineKeyboardButton('¬∞C (–¶–µ–ª—å—Å–∏–π)', callback_data='unit_c'),
        InlineKeyboardButton('¬∞F (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)', callback_data='unit_f')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:', reply_markup=reply_markup)

# ================== –ü–û–ì–û–î–ê ================== #
def validate_city(city: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    return bool(re.match(r'^[A-Za-z–ê-–Ø–∞-—è\s-]{2,50}$', city))

async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    city = update.message.text
    
    if not validate_city(city):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å!")
        return
    
    try:
        user_id = update.message.from_user.id
        units = USER_PREFERENCES.get(user_id, 'c')
        api_key = os.getenv('OWM_API_KEY')
        api_units = 'metric' if units == 'c' else 'imperial'
        
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units={api_units}&lang=ru'
        response = requests.get(url)
        response.raise_for_status()
        
        data = response.json()
        temp = int(data['main']['temp'])
        temp_symbol = '¬∞C' if units == 'c' else '¬∞F'
        
        weather_info = (
            f"üåÜ *–ì–æ—Ä–æ–¥:* {data['name']}\n"
            f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp}{temp_symbol}\n"
            f"üí® *–í–µ—Ç–µ—Ä:* {data['wind']['speed']} –º/—Å\n"
            f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {data['weather'][0]['description'].capitalize()}"
        )
        
        keyboard = [[
            InlineKeyboardButton('üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è', callback_data=f'forecast_{city}'),
            InlineKeyboardButton('‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã', callback_data='change_units')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(weather_info, parse_mode='Markdown', reply_markup=reply_markup)

    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        else:
            await update.message.reply_text("üòû –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –ø–æ–≥–æ–¥—ã")
        logger.error(f"Weather API error: {e}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        logger.error(f"General error: {e}")

# ================== –ü–†–û–ì–ù–û–ó ================== #
async def get_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    try:
        city = None
        chat_id = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
        if update.callback_query:
            query = update.callback_query
            city = query.data.split('_')[1]
            chat_id = query.message.chat_id
        elif context.args:
            city = ' '.join(context.args)
            chat_id = update.message.chat_id
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /forecast <–≥–æ—Ä–æ–¥>")
            return

        user_id = update.effective_user.id
        units = USER_PREFERENCES.get(user_id, 'c')
        api_units = 'metric' if units == 'c' else 'imperial'
        api_key = os.getenv('OWM_API_KEY')

        url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units={api_units}&lang=ru'
        response = requests.get(url)
        response.raise_for_status()
        
        data = response.json()
        forecast_text = f'üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 3 –¥–Ω—è:\n'
        temp_symbol = '¬∞C' if units == 'c' else '¬∞F'

        for i in range(0, 24, 8):
            day_data = data['list'][i]
            date = datetime.strptime(day_data['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            temp = int(day_data['main']['temp'])
            desc = day_data['weather'][0]['description'].capitalize()
            forecast_text += f'üìÜ {date}: üå° {temp}{temp_symbol}, ‚òÅ {desc}\n'

        await context.bot.send_message(chat_id=chat_id, text=forecast_text)

    except requests.exceptions.HTTPError as e:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" if e.response.status_code != 404 else "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await context.bot.send_message(chat_id=chat_id, text=error_text)
        logger.error(f"Forecast API error: {e}")
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
        logger.error(f"Forecast error: {e}")

# ================== –ö–ù–û–ü–ö–ò ================== #
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data.startswith('forecast_'):
            await get_forecast(update, context)
            
        elif query.data == 'change_units':
            keyboard = [[
                InlineKeyboardButton('¬∞C (–¶–µ–ª—å—Å–∏–π)', callback_data='unit_c'),
                InlineKeyboardButton('¬∞F (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)', callback_data='unit_f')
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:', reply_markup=reply_markup)
            
        elif query.data.startswith('unit_'):
            unit = query.data.split('_')[1]
            USER_PREFERENCES[query.from_user.id] = unit
            unit_name = '–¶–µ–ª—å—Å–∏–π' if unit == 'c' else '–§–∞—Ä–µ–Ω–≥–µ–π—Ç'
            await query.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {unit_name}")
            
    except Exception as e:
        logger.error(f"Button callback error: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        )

# ================== –¢–ï–ö–°–¢ ================== #
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    if text == "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    elif text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await set_units(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await get_weather(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("units", set_units))
    app.add_handler(CommandHandler("forecast", get_forecast))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()